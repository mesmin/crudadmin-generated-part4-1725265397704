{"app_configController.js":"const AppConfig = require('../models/app_config');\n\nexports.createAppConfig = async (req, res) => {\n  try {\n    const newAppConfig = new AppConfig(req.body);\n    const savedAppConfig = await newAppConfig.save();\n    res.status(201).json(savedAppConfig);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.getAllAppConfigs = async (req, res) => {\n  try {\n    const app_configs = await AppConfig.find();\n    res.json(app_configs);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.getAppConfig = async (req, res) => {\n  try {\n    const app_config = await AppConfig.findById(req.params.id);\n    if (app_config == null) {\n      return res.status(404).json({ message: 'AppConfig not found' });\n    }\n    res.json(app_config);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.updateAppConfig = async (req, res) => {\n  try {\n    const updatedAppConfig = await AppConfig.findByIdAndUpdate(req.params.id, req.body, { new: true });\n    res.json(updatedAppConfig);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.deleteAppConfig = async (req, res) => {\n  try {\n    await AppConfig.findByIdAndDelete(req.params.id);\n    res.json({ message: 'AppConfig deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};","business_profileController.js":"const BusinessProfile = require('../models/business_profile');\n\nexports.createBusinessProfile = async (req, res) => {\n  try {\n    const newBusinessProfile = new BusinessProfile(req.body);\n    const savedBusinessProfile = await newBusinessProfile.save();\n    res.status(201).json(savedBusinessProfile);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.getAllBusinessProfiles = async (req, res) => {\n  try {\n    const business_profiles = await BusinessProfile.find();\n    res.json(business_profiles);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.getBusinessProfile = async (req, res) => {\n  try {\n    const business_profile = await BusinessProfile.findById(req.params.id);\n    if (business_profile == null) {\n      return res.status(404).json({ message: 'BusinessProfile not found' });\n    }\n    res.json(business_profile);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.updateBusinessProfile = async (req, res) => {\n  try {\n    const updatedBusinessProfile = await BusinessProfile.findByIdAndUpdate(req.params.id, req.body, { new: true });\n    res.json(updatedBusinessProfile);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.deleteBusinessProfile = async (req, res) => {\n  try {\n    await BusinessProfile.findByIdAndDelete(req.params.id);\n    res.json({ message: 'BusinessProfile deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};","businessesController.js":"const Businesses = require('../models/businesses');\n\nexports.createBusinesses = async (req, res) => {\n  try {\n    const newBusinesses = new Businesses(req.body);\n    const savedBusinesses = await newBusinesses.save();\n    res.status(201).json(savedBusinesses);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.getAllBusinessess = async (req, res) => {\n  try {\n    const businessess = await Businesses.find();\n    res.json(businessess);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.getBusinesses = async (req, res) => {\n  try {\n    const businesses = await Businesses.findById(req.params.id);\n    if (businesses == null) {\n      return res.status(404).json({ message: 'Businesses not found' });\n    }\n    res.json(businesses);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.updateBusinesses = async (req, res) => {\n  try {\n    const updatedBusinesses = await Businesses.findByIdAndUpdate(req.params.id, req.body, { new: true });\n    res.json(updatedBusinesses);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.deleteBusinesses = async (req, res) => {\n  try {\n    await Businesses.findByIdAndDelete(req.params.id);\n    res.json({ message: 'Businesses deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};","plansController.js":"const Plans = require('../models/plans');\n\nexports.createPlans = async (req, res) => {\n  try {\n    const newPlans = new Plans(req.body);\n    const savedPlans = await newPlans.save();\n    res.status(201).json(savedPlans);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.getAllPlanss = async (req, res) => {\n  try {\n    const planss = await Plans.find();\n    res.json(planss);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.getPlans = async (req, res) => {\n  try {\n    const plans = await Plans.findById(req.params.id);\n    if (plans == null) {\n      return res.status(404).json({ message: 'Plans not found' });\n    }\n    res.json(plans);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.updatePlans = async (req, res) => {\n  try {\n    const updatedPlans = await Plans.findByIdAndUpdate(req.params.id, req.body, { new: true });\n    res.json(updatedPlans);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.deletePlans = async (req, res) => {\n  try {\n    await Plans.findByIdAndDelete(req.params.id);\n    res.json({ message: 'Plans deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};","queue_itemsController.js":"const QueueItems = require('../models/queue_items');\n\nexports.createQueueItems = async (req, res) => {\n  try {\n    const newQueueItems = new QueueItems(req.body);\n    const savedQueueItems = await newQueueItems.save();\n    res.status(201).json(savedQueueItems);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.getAllQueueItemss = async (req, res) => {\n  try {\n    const queue_itemss = await QueueItems.find();\n    res.json(queue_itemss);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.getQueueItems = async (req, res) => {\n  try {\n    const queue_items = await QueueItems.findById(req.params.id);\n    if (queue_items == null) {\n      return res.status(404).json({ message: 'QueueItems not found' });\n    }\n    res.json(queue_items);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.updateQueueItems = async (req, res) => {\n  try {\n    const updatedQueueItems = await QueueItems.findByIdAndUpdate(req.params.id, req.body, { new: true });\n    res.json(updatedQueueItems);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.deleteQueueItems = async (req, res) => {\n  try {\n    await QueueItems.findByIdAndDelete(req.params.id);\n    res.json({ message: 'QueueItems deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};","queue_managerController.js":"const QueueManager = require('../models/queue_manager');\n\nexports.createQueueManager = async (req, res) => {\n  try {\n    const newQueueManager = new QueueManager(req.body);\n    const savedQueueManager = await newQueueManager.save();\n    res.status(201).json(savedQueueManager);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.getAllQueueManagers = async (req, res) => {\n  try {\n    const queue_managers = await QueueManager.find();\n    res.json(queue_managers);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.getQueueManager = async (req, res) => {\n  try {\n    const queue_manager = await QueueManager.findById(req.params.id);\n    if (queue_manager == null) {\n      return res.status(404).json({ message: 'QueueManager not found' });\n    }\n    res.json(queue_manager);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.updateQueueManager = async (req, res) => {\n  try {\n    const updatedQueueManager = await QueueManager.findByIdAndUpdate(req.params.id, req.body, { new: true });\n    res.json(updatedQueueManager);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.deleteQueueManager = async (req, res) => {\n  try {\n    await QueueManager.findByIdAndDelete(req.params.id);\n    res.json({ message: 'QueueManager deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};","queue_participantsController.js":"const QueueParticipants = require('../models/queue_participants');\n\nexports.createQueueParticipants = async (req, res) => {\n  try {\n    const newQueueParticipants = new QueueParticipants(req.body);\n    const savedQueueParticipants = await newQueueParticipants.save();\n    res.status(201).json(savedQueueParticipants);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.getAllQueueParticipantss = async (req, res) => {\n  try {\n    const queue_participantss = await QueueParticipants.find();\n    res.json(queue_participantss);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.getQueueParticipants = async (req, res) => {\n  try {\n    const queue_participants = await QueueParticipants.findById(req.params.id);\n    if (queue_participants == null) {\n      return res.status(404).json({ message: 'QueueParticipants not found' });\n    }\n    res.json(queue_participants);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.updateQueueParticipants = async (req, res) => {\n  try {\n    const updatedQueueParticipants = await QueueParticipants.findByIdAndUpdate(req.params.id, req.body, { new: true });\n    res.json(updatedQueueParticipants);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.deleteQueueParticipants = async (req, res) => {\n  try {\n    await QueueParticipants.findByIdAndDelete(req.params.id);\n    res.json({ message: 'QueueParticipants deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};","queuesController.js":"const Queues = require('../models/queues');\n\nexports.createQueues = async (req, res) => {\n  try {\n    const newQueues = new Queues(req.body);\n    const savedQueues = await newQueues.save();\n    res.status(201).json(savedQueues);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.getAllQueuess = async (req, res) => {\n  try {\n    const queuess = await Queues.find();\n    res.json(queuess);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.getQueues = async (req, res) => {\n  try {\n    const queues = await Queues.findById(req.params.id);\n    if (queues == null) {\n      return res.status(404).json({ message: 'Queues not found' });\n    }\n    res.json(queues);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.updateQueues = async (req, res) => {\n  try {\n    const updatedQueues = await Queues.findByIdAndUpdate(req.params.id, req.body, { new: true });\n    res.json(updatedQueues);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.deleteQueues = async (req, res) => {\n  try {\n    await Queues.findByIdAndDelete(req.params.id);\n    res.json({ message: 'Queues deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};","sessionsController.js":"const Sessions = require('../models/sessions');\n\nexports.createSessions = async (req, res) => {\n  try {\n    const newSessions = new Sessions(req.body);\n    const savedSessions = await newSessions.save();\n    res.status(201).json(savedSessions);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.getAllSessionss = async (req, res) => {\n  try {\n    const sessionss = await Sessions.find();\n    res.json(sessionss);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.getSessions = async (req, res) => {\n  try {\n    const sessions = await Sessions.findById(req.params.id);\n    if (sessions == null) {\n      return res.status(404).json({ message: 'Sessions not found' });\n    }\n    res.json(sessions);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.updateSessions = async (req, res) => {\n  try {\n    const updatedSessions = await Sessions.findByIdAndUpdate(req.params.id, req.body, { new: true });\n    res.json(updatedSessions);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.deleteSessions = async (req, res) => {\n  try {\n    await Sessions.findByIdAndDelete(req.params.id);\n    res.json({ message: 'Sessions deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};","subscriptionsController.js":"const Subscriptions = require('../models/subscriptions');\n\nexports.createSubscriptions = async (req, res) => {\n  try {\n    const newSubscriptions = new Subscriptions(req.body);\n    const savedSubscriptions = await newSubscriptions.save();\n    res.status(201).json(savedSubscriptions);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.getAllSubscriptionss = async (req, res) => {\n  try {\n    const subscriptionss = await Subscriptions.find();\n    res.json(subscriptionss);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.getSubscriptions = async (req, res) => {\n  try {\n    const subscriptions = await Subscriptions.findById(req.params.id);\n    if (subscriptions == null) {\n      return res.status(404).json({ message: 'Subscriptions not found' });\n    }\n    res.json(subscriptions);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.updateSubscriptions = async (req, res) => {\n  try {\n    const updatedSubscriptions = await Subscriptions.findByIdAndUpdate(req.params.id, req.body, { new: true });\n    res.json(updatedSubscriptions);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.deleteSubscriptions = async (req, res) => {\n  try {\n    await Subscriptions.findByIdAndDelete(req.params.id);\n    res.json({ message: 'Subscriptions deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};","userlinejoinsController.js":"const Userlinejoins = require('../models/userlinejoins');\n\nexports.createUserlinejoins = async (req, res) => {\n  try {\n    const newUserlinejoins = new Userlinejoins(req.body);\n    const savedUserlinejoins = await newUserlinejoins.save();\n    res.status(201).json(savedUserlinejoins);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.getAllUserlinejoinss = async (req, res) => {\n  try {\n    const userlinejoinss = await Userlinejoins.find();\n    res.json(userlinejoinss);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.getUserlinejoins = async (req, res) => {\n  try {\n    const userlinejoins = await Userlinejoins.findById(req.params.id);\n    if (userlinejoins == null) {\n      return res.status(404).json({ message: 'Userlinejoins not found' });\n    }\n    res.json(userlinejoins);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.updateUserlinejoins = async (req, res) => {\n  try {\n    const updatedUserlinejoins = await Userlinejoins.findByIdAndUpdate(req.params.id, req.body, { new: true });\n    res.json(updatedUserlinejoins);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.deleteUserlinejoins = async (req, res) => {\n  try {\n    await Userlinejoins.findByIdAndDelete(req.params.id);\n    res.json({ message: 'Userlinejoins deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};","usersController.js":"const Users = require('../models/users');\n\nexports.createUsers = async (req, res) => {\n  try {\n    const newUsers = new Users(req.body);\n    const savedUsers = await newUsers.save();\n    res.status(201).json(savedUsers);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.getAllUserss = async (req, res) => {\n  try {\n    const userss = await Users.find();\n    res.json(userss);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.getUsers = async (req, res) => {\n  try {\n    const users = await Users.findById(req.params.id);\n    if (users == null) {\n      return res.status(404).json({ message: 'Users not found' });\n    }\n    res.json(users);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.updateUsers = async (req, res) => {\n  try {\n    const updatedUsers = await Users.findByIdAndUpdate(req.params.id, req.body, { new: true });\n    res.json(updatedUsers);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.deleteUsers = async (req, res) => {\n  try {\n    await Users.findByIdAndDelete(req.params.id);\n    res.json({ message: 'Users deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};","virtuallinesController.js":"const Virtuallines = require('../models/virtuallines');\n\nexports.createVirtuallines = async (req, res) => {\n  try {\n    const newVirtuallines = new Virtuallines(req.body);\n    const savedVirtuallines = await newVirtuallines.save();\n    res.status(201).json(savedVirtuallines);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.getAllVirtualliness = async (req, res) => {\n  try {\n    const virtualliness = await Virtuallines.find();\n    res.json(virtualliness);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.getVirtuallines = async (req, res) => {\n  try {\n    const virtuallines = await Virtuallines.findById(req.params.id);\n    if (virtuallines == null) {\n      return res.status(404).json({ message: 'Virtuallines not found' });\n    }\n    res.json(virtuallines);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.updateVirtuallines = async (req, res) => {\n  try {\n    const updatedVirtuallines = await Virtuallines.findByIdAndUpdate(req.params.id, req.body, { new: true });\n    res.json(updatedVirtuallines);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.deleteVirtuallines = async (req, res) => {\n  try {\n    await Virtuallines.findByIdAndDelete(req.params.id);\n    res.json({ message: 'Virtuallines deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};"}